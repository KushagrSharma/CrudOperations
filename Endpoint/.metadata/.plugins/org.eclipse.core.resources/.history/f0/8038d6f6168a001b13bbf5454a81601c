package com.cloudzoneInfoConnect.WebApp.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cloudzoneInfoConnect.WebApp.exception.ResourceNotFoundException;
import com.cloudzoneInfoConnect.WebApp.model.Employee;
import com.cloudzoneInfoConnect.WebApp.repository.EmployeeRepository;

@RestController
@RequestMapping("/api/v1")
public class EmployeeController {

	@Autowired
	private EmployeeRepository employeeRepository;
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees(){
		
		return employeeRepository.findAll();
	}
	
	// Employee Rest aPI
	
	@PostMapping("/employees")
	public Employee createEmployee(@RequestBody Employee employee) {
		return employeeRepository.save(employee);
	}
		
	// Get employee details by id
	@GetMapping("/employees/{id}")
	public ResponseEntity<Employee> getEmployeeByID(@PathVariable Long id) {
		String empId = String.valueOf(id);
		Employee employee = employeeRepository.findById(empId)
				.orElseThrow(() -> new ResourceNotFoundException("Not data found for Id"));
		
		return ResponseEntity.ok(employee);
	}
	
	// Update employee API
	@PutMapping("/employees/{id}")
	public ResponseEntity<Employee> updateEmployee(Long id, Employee updateEmployee){
		String empId = String.valueOf(id);
		Employee employee = employeeRepository.findById(empId)
				.orElseThrow(() -> new ResourceNotFoundException("Not data found for Id"));
		
		employee.setFirstName(updateEmployee.getFirstName());
		employee.setLastname(updateEmployee.getLastName());
		employee.setEmailId(updateEmployee.getEmailId());
		
		Employee employeeDetails= employeeRepository.save(employee);
		return ResponseEntity.ok(employeeDetails);
	}
}
